name: Add Issue to Project

on:
  workflow_call:
    inputs:
      issue_number:
        description: 'Issue number'
        required: true
        type: number
      repository:
        description: 'Repository name (org/repo format)'
        required: true
        type: string
      project_numbers:
        description: 'Comma-separated list of project numbers (e.g., "6,22")'
        required: true
        type: string
    secrets:
      gh_token:
        description: 'GitHub token with project write permissions'
        required: true

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    name: Add issue to GitHub Project(s)

    steps:
      - name: Checkout scripts
        uses: actions/checkout@v4
        with:
          repository: NASA-PDS/.github
          sparse-checkout: |
            .github/scripts
          sparse-checkout-cone-mode: false

      - name: Add to projects
        env:
          GH_TOKEN: ${{ secrets.gh_token }}
          REPOSITORY: ${{ inputs.repository }}
          ISSUE_NUMBER: ${{ inputs.issue_number }}
          PROJECT_NUMBERS: ${{ inputs.project_numbers }}
        run: |
          # Source utility functions
          source .github/scripts/project-utils.sh

          echo "Adding issue to project(s): $PROJECT_NUMBERS"

          # Extract org from repository
          org=$(echo "$REPOSITORY" | cut -d'/' -f1)

          # Get issue node ID once
          issue_id=$(get_issue_id "$REPOSITORY" "$ISSUE_NUMBER")
          echo "Issue node ID: $issue_id"

          # Split comma-separated project numbers and process each
          IFS=',' read -ra PROJECTS <<< "$PROJECT_NUMBERS"
          for project_num in "${PROJECTS[@]}"; do
            # Trim whitespace
            project_num=$(echo "$project_num" | xargs)

            echo ""
            echo "Processing project #$project_num..."

            # Get the project ID from the project number
            project_id=$(get_project_id_by_number "$org" "$project_num")

            if [ -z "$project_id" ]; then
              echo "❌ Could not find project #$project_num"
              exit 1
            fi

            echo "Project ID: $project_id"

            # Add issue to project (idempotent)
            item_id=$(ensure_issue_in_project "$project_id" "$issue_id")

            if [ -n "$item_id" ]; then
              echo "✅ Issue in project #$project_num (item: $item_id)"
            else
              echo "❌ Failed to add to project #$project_num"
              exit 1
            fi
          done

          echo ""
          echo "✅ All done!"

      - name: Process build labels
        env:
          GH_TOKEN: ${{ secrets.gh_token }}
        run: |
          # Extract org from repository
          org=$(echo "${{ inputs.repository }}" | cut -d'/' -f1)

          # Get all labels starting with "B" on this issue
          echo "Checking for build labels on issue #${{ inputs.issue_number }}..."
          build_labels=$(gh api "repos/${{ inputs.repository }}/issues/${{ inputs.issue_number }}" \
            --jq '.labels[].name | select(startswith("B"))')

          if [ -z "$build_labels" ]; then
            echo "No build labels found on issue"
            exit 0
          fi

          echo "Found build labels:"
          echo "$build_labels"
          echo ""

          # Process each build label
          while IFS= read -r label; do
            [ -z "$label" ] && continue

            echo "Processing build label: $label"

            # Run Python automation script for each label
            python3 .github/scripts/project_automation.py \
              add-to-build-project \
              --repository "${{ inputs.repository }}" \
              --issue-number ${{ inputs.issue_number }} \
              --org "$org" \
              --label "$label"

            echo ""
          done <<< "$build_labels"

          echo "✅ All build labels processed"
