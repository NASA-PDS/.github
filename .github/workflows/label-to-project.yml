name: Label-based Project Management

on:
  workflow_call:
    inputs:
      issue_number:
        description: 'Issue number'
        required: true
        type: number
      repository:
        description: 'Repository name (org/repo format)'
        required: true
        type: string
      label_name:
        description: 'Label that was added'
        required: true
        type: string
    secrets:
      gh_token:
        description: 'GitHub token with project write permissions'
        required: true

jobs:
  handle-label:
    runs-on: ubuntu-latest
    name: Handle label-based project automation

    steps:
      - name: Checkout scripts
        uses: actions/checkout@v4
        with:
          repository: NASA-PDS/.github
          sparse-checkout: |
            .github/scripts
          sparse-checkout-cone-mode: false

      - name: Process build label
        if: startsWith(inputs.label_name, 'B')
        env:
          GH_TOKEN: ${{ secrets.gh_token }}
          REPOSITORY: ${{ inputs.repository }}
          ISSUE_NUMBER: ${{ inputs.issue_number }}
          LABEL: ${{ inputs.label_name }}
        run: |
          # Source utility functions
          source .github/scripts/project-utils.sh

          echo "Processing build label: $LABEL"

          # Extract org from repository
          org=$(echo "$REPOSITORY" | cut -d'/' -f1)

          # Get issue node ID
          issue_id=$(get_issue_id "$REPOSITORY" "$ISSUE_NUMBER")
          echo "Issue node ID: $issue_id"

          # Find project with matching title
          project_data=$(get_project_by_title "$org" "$LABEL")

          if [ -z "$project_data" ]; then
            echo "⚠️  No project found with title '$LABEL' - skipping"
            exit 0
          fi

          project_id=$(echo "$project_data" | jq -r '.id')
          project_number=$(echo "$project_data" | jq -r '.number')

          echo "Found project #$project_number: $LABEL"
          echo "Project ID: $project_id"

          # Add issue to project (idempotent)
          item_id=$(ensure_issue_in_project "$project_id" "$issue_id")

          if [ -n "$item_id" ]; then
            echo "✅ Issue in project #$project_number (item: $item_id)"
          else
            echo "❌ Failed to add to project #$project_number"
            exit 1
          fi

      - name: Process sprint-backlog label
        if: inputs.label_name == 'sprint-backlog'
        env:
          GH_TOKEN: ${{ secrets.gh_token }}
          REPOSITORY: ${{ inputs.repository }}
          ISSUE_NUMBER: ${{ inputs.issue_number }}
        run: |
          # Source utility functions
          source .github/scripts/project-utils.sh

          echo "Processing sprint-backlog label"

          # Extract org from repository
          org=$(echo "$REPOSITORY" | cut -d'/' -f1)

          # Get issue node ID
          issue_id=$(get_issue_id "$REPOSITORY" "$ISSUE_NUMBER")
          echo "Issue node ID: $issue_id"

          # Find all build labels on this issue
          build_labels=$(get_labels_by_prefix "$REPOSITORY" "$ISSUE_NUMBER" "B")

          if [ -z "$build_labels" ]; then
            echo "⚠️  No build label found on issue"
            echo "ℹ️  Please add a build label (e.g., B16, B17) before adding sprint-backlog"
            exit 0
          fi

          echo "Found build labels:"
          echo "$build_labels"
          echo ""

          # Process each build label
          success_count=0
          while IFS= read -r build_label; do
            echo "Processing iteration for build: $build_label"

            # Find the project with matching title
            project_data=$(get_project_by_title "$org" "$build_label")

            if [ -z "$project_data" ]; then
              echo "⚠️  No project found for build '$build_label' - skipping"
              echo ""
              continue
            fi

            project_id=$(echo "$project_data" | jq -r '.id')
            project_number=$(echo "$project_data" | jq -r '.number')

            echo "Found project #$project_number: $build_label"

            # Ensure issue is in project
            item_id=$(ensure_issue_in_project "$project_id" "$issue_id")

            if [ -z "$item_id" ]; then
              echo "❌ Failed to add issue to project #$project_number"
              echo ""
              continue
            fi

            echo "✅ Issue in project (item: $item_id)"

            # Set iteration to current
            if set_iteration_to_current "$project_id" "$item_id"; then
              echo "✅ Set iteration to @current in project #$project_number"
              ((success_count++))
            else
              echo "❌ Failed to set iteration in project #$project_number"
            fi
            echo ""
          done <<< "$build_labels"

          if [ $success_count -gt 0 ]; then
            echo "✅ Sprint-backlog processing complete ($success_count project(s) updated)"
          else
            echo "⚠️  No projects were updated"
          fi
